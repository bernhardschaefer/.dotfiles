export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export DEFAULT_USER=$(whoami)

pathappend() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="$PATH:$ARG"
    fi
  done
}

pathprepend() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="$ARG:$PATH"
    fi
  done
}

# If you come from bash you might have to change your $PATH.
pathprepend ${HOME}/bin /usr/local/bin ${HOME}/.local/bin

# unix
#export GREP_OPTIONS='--color=auto --exclude=*.pyc --exclude=.* --exclude-dir=.*'

# --- VIM ---
export EDITOR=$(which vim)
# git does not work with mvim aliased vim
export GIT_EDITOR=/usr/bin/vim

# --- Java ---
#if [[ "$OSTYPE" == "darwin"* ]]; then
#    export JAVA_HOME=$(/usr/libexec/java_home)
#fi

# --- fd ---
if type fd &> /dev/null; then
    # Setting fd as the default source for fzf
    export FZF_DEFAULT_COMMAND='fd --type f'

    # To apply the command to CTRL-T as well
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

     # Use fd (https://github.com/sharkdp/fd) instead of the default find
    # command for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
      fd --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
      fd --type d --follow --exclude ".git" . "$1"
    }
    export FZF_ALT_C_COMMAND="fd --type d"
fi

# --- Spark ---
#if [ -d /opt/spark/spark-default ]; then
#    export SPARK_HOME=/opt/spark/spark-default
#    export PATH=$PATH:$SPARK_HOME/bin
#fi

# for using RDD and lambda operations this python version needs to be in $PATH on all cluster nodes
#export PYSPARK_PYTHON="python3.6"
#export PYSPARK_DRIVER_PYTHON="jupyter"
#export PYSPARK_DRIVER_PYTHON_OPTS="notebook --no-browser --ip='*' --port=8888"
#export PYSPARK_DRIVER_PYTHON_OPTS="notebook"

LANGFUSE_HOME="${HOME}/ws/langfuse"

langfuse_run() {
    colima start default
    cd "${LANGFUSE_HOME}" || return
    docker compose up -d
    open "http://localhost:3000"
}

langfuse_down() {
    cd "${LANGFUSE_HOME}" || return
    docker compose down
}

langfuse_update() {
    cd "${LANGFUSE_HOME}" || return
    docker compose down
    git pull
    docker compose pull
}

alias langfuse='langfuse_command'

langfuse_command() {
    case $1 in
        run|start)
            langfuse_run
            ;;
        down|stop)
            langfuse_down
            ;;
        update)
            langfuse_update
            ;;
        *)
            echo "Usage: langfuse {run|start|down|stop|update}"
            ;;
    esac
}
